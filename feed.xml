<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Talks | Red Panthers - Experts in Ruby on Rails kochi, India</title>
    <description>We specialize in helping our clients validate, build and expand their business through technology. If you have an idea, or want to build something innovative, Let&#39;s help you. </description>
    <link>http://slides.redpanthers.co/slides/</link>
    <atom:link href="http://slides.redpanthers.co/slides/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Mon, 04 Apr 2016 08:32:49 +0530</pubDate>
    <lastBuildDate>Mon, 04 Apr 2016 08:32:49 +0530</lastBuildDate>
    <generator>Jekyll v2.4.0</generator>
    
      <item>
        <title>Multithreading</title>
        <description>&lt;section data-markdown=&quot;&quot;&gt;
## Multi threading in Ruby

March 29th 2016
&lt;/section&gt;

&lt;section&gt;
  &lt;h2&gt;Aparna V&lt;/h2&gt;
  &lt;p&gt;
    Ruby Developer Trainee @RedPanthers
  &lt;/p&gt;
&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
### Introduction
What is threading?
- Threading often improves program response time by making heavy procedures run in the background.
- A multithreaded program has more than one thread of execution.
- Within each thread, statements are executed sequentially, but the threads themselves may be executed in parallel on a multicore CPU, for      example.
- Often on a single CPU machine, multiple threads are not actually executed in parallel, but parallelism is simulated by interleaving the execution of the threads.
&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
### Creating Ruby Threads
- To start a new thread, just associate a block with a call to Thread.new.
- Thread #1 is running here.
- Thread.new {
-  Thread #2 runs this code.
- }
  Thread #1 runs this code.
&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
- How we can use multi-threaded Ruby program.  
def func1  
i=0  
while i&amp;lt;=2  
puts &quot;func1 at: #{Time.now}&quot;  
sleep(2)  
i=i+1  
end  
end  
def func2  
j=0  
while j&amp;lt;=2  

&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
##continued
puts &quot;func2 at: #{Time.now}&quot;  
sleep(1)  
j=j+1  
end  
end  
puts &quot;Started At #{Time.now}&quot;  
t1=Thread.new{func1()}  
t2=Thread.new{func2()}  
t1.join  
t2.join  
puts &quot;End at #{Time.now}&quot;  
&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
### Threads and exceptions
- If an exception is raised in the main thread, and is not handled anywhere, the Ruby interpreter prints a message and exits. In threads other than the main thread, unhandled exceptions cause the thread to stop running.

- If a thread t exits because of an unhandled exception, and another thread s calls t.join or t.value, then the exception that occurred in t is raised in the thread s.
&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
- If Thread.abort_on_exception is false, the default condition, an unhandled exception simply kills the current thread and all the rest continue to run.

- If you would like any unhandled exception in any thread to cause the interpreter to exit, set the class method Thread.abort_on_exception to true.

- t = Thread.new { ... }
- t.abort_on_exception = true
&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
### Thread Priorities
- High-priority threads are scheduled before low-priority threads.
- You can set and query the priority of a Ruby Thread object with priority= and priority. A newly created thread starts at the same priority as the thread that created it. The main thread starts off at priority 0.
- There is no way to set the priority of a thread before it starts running. A thread can, however, raise or lower its own priority as the first action it takes.
&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
### Thread exclusion
- If two threads share access to the same data, and at least one of the threads modifies that data, you must take special care to ensure that no thread can ever see the data in an inconsistent state. This is called thread exclusion.
- Mutex is a class that implements a simple semaphore lock for mutually exclusive access to some shared resource. That is, only one thread may hold the lock at a given time. Other threads may choose to wait in line for the lock to become available, or may simply choose to get an immediate error indicating that the lock is not available.
&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
- By placing all accesses to the shared data under control of a mutex, we ensure consistency and atomic operation.
&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
### Muti threading vs Multiprogramming
- Ruby concurrency is when two tasks can start, run, and complete in overlapping time periods. It doesn’t necessarily mean, though, that they’ll ever both be running at the same instant (e.g., multiple threads on a single-core machine).  In Ruby, the fork() system call is used to create a “copy” of the current process. This new process is scheduled at the operating system level, so it can run concurrently with the original process, just as any other independent process can.
&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
### Multi processing
- using fork() to employ multiple processes:  
puts Benchmark.measure{  
  100.times do |i|  
    fork do  
      Mailer.deliver do
        from    &quot;eki_#{i}@eqbalq.com&quot;
        to      &quot;jill_#{i}@example.com&quot;
        subject &quot;Threading and Forking (#{i})&quot;
        body    &quot;Some content&quot;
      end  
    end  
  end  
  Process.waitall  
}  
&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
###continued
- It has a major drawback which is the amount of memory that it will consume. Forking is somewhat expensive, especially if a Copy-on-Write (CoW) is not utilized by the Ruby interpreter that you’re using.
&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
### Ruby Multithreading
- Multiple threads within a single process have considerably less overhead than a corresponding number of processes since they share address space and memory.
* A thread is a stream of instructions within a process. Each thread has its own instruction pointer, set of registers and stack memory. The virtual address space is process specific, or common to all threads within a process. So, data on the heap can be readily accessed by all threads, for good or ill.
&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
### Using multi threading  

- threads = []  
puts Benchmark.measure{  
100.times do |i|  
threads &amp;lt;&amp;lt; Thread.new do  
Mailer.deliver do
from    &quot;eki_#{i}@eqbalq.com&quot;  
to      &quot;jill_#{i}@example.com&quot;  
subject &quot;Threading and Forking (#{i})&quot;  
body    &quot;Some content&quot;  
end  
end  
end  
threads.map(&amp;amp;:join)  }  
&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
- Multi-threading is a more &quot;light weight&quot; form of concurrency: there is less context per thread than per process. As a result thread lifetime, context switching and synchronisation costs are lower. The shared address space (noted above) means data sharing requires no extra work.
* In any multithreaded environment, context switching occurs. Context switching is the process by which a thread is stopped and its state and context are stored allowing other threads to use CPU cycles. Once the competing thread has been interrupted in a similar manner, the context and state of the original thread are loaded and the original thread has the opportunity to run if it gets priority.

&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
### GIL (Global Interpreter Lock).
- GIL does not make your code thread-safe. It only guarantees that two threads can’t run Ruby code at the same time. Thus it does inhibit parallelism. However, threads can still be paused and resumed at any given point, which means that they absolutely can clobber each others’ data.
- GIL makes single threaded programs faster, that multi-threaded programs are much easier to develop since the data structures are safe and finally that a lot of C extensions are not thread safe and without the GIL, these C extensions don’t behave properly.
&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
- An interpreter which uses GIL will always allow exactly one thread and one thread only to execute at a time, even if run on a multi-core processor.
- Ruby MRI and CPython are two of the most common examples of popular interpreters that have a GIL.
- An interpreter which uses GIL will always allow exactly one thread and one thread only to execute at a time, even if run on a multi-core processor. Ruby MRI and CPython are two of the most common examples of popular interpreters that have a GIL.
&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
### To make a Rails app thread-safe, you have to make sure the code is thread-safe on three different levels:

* Rails framework and its dependencies.
* Your app code.
* Any third party code you use.

&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
### Actors/Fibers
* Actors are a like threads which don’t share the same memory context. Communication between actors is done via exchanged messages ensuring that each actor handles its own state and therefore avoiding corrupt data (two threads can modify the same data at the same time, but an actor can’t receive two messages at the exact same time).
* A fiber is like a simplified thread which isn’t scheduled by the VM but by the programmer. Fibers are like blocks which can be paused and resumed from the outside of from within themselves. Fibers are faster and use less memory than threads.

&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
### continued
* Fiber allow developers to manually control the scheduling of “concurrent” code but also to have the code within the fiber to auto schedule itself.
* That’s pretty big because now you can wrap an incoming web request in its own fiber and tell it to send a response back when it’s done doing its things. In the meantime, you can move on the to next incoming request.
* Whenever a request within a fiber is done, it will automatically resume itself and be returned.

&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
* The only problem is that if you are doing any type of blocking IO in a fiber, the entire thread is blocked and the other fibers aren’t running. Blocking operations are operations like database/memcached queries, http requests, basically things you are probably triggering from your controllers. The only problem to fix now is to avoid blocking IOs.

&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
### Reference
* https://bearmetal.eu/theden/how-do-i-know-whether-my-rails-app-is-thread-safe-or-not/
* http://www.tutorialspoint.com/ruby/ruby_multithreading.htm
* http://merbist.com/2011/02/22/concurrency-in-ruby-explained/
* http://pltconfusion.com/concurrency_primitives_and_abstractions_in_ruby/
&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
## Thank you
&lt;/section&gt;
</description>
        <pubDate>Tue, 29 Mar 2016 00:00:00 +0530</pubDate>
        <link>http://slides.redpanthers.co/slides/multi-threading-in-ruby-on-rails-framework</link>
        <guid isPermaLink="true">http://slides.redpanthers.co/slides/multi-threading-in-ruby-on-rails-framework</guid>
        
        
      </item>
    
      <item>
        <title>Snap SVG</title>
        <description>&lt;section data-markdown=&quot;&quot;&gt;
### Snap SVG
&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
  &lt;h4&gt;Sibin Xavier&lt;/h4&gt;
  &lt;p&gt;
    Frontend Developer
  &lt;/p&gt;
&lt;/section&gt;
&lt;section data-markdown=&quot;&quot;&gt;
  ### SVG - Scalable Vector Graphics
  * SVG stands for Scalable Vector Graphics
  * SVG is used to define vector-based graphics for the Web
  * SVG defines the graphics in XML format
  * SVG graphics do NOT lose any quality if they are zoomed or resized
Every element and every attribute in SVG files can be animated
  * SVG is a W3C recommendation
  * SVG integrates with other W3C standards such as the DOM and XSL
&lt;/section&gt;
&lt;section data-markdown=&quot;&quot;&gt;
  ### SVG is a opensource project from W3C
  - Currently alsmost every browser supports SVG
  - Many well developed plugins available to create SVG Objects
  - Google index SVG elements in search results
&lt;/section&gt;
&lt;section data-markdown=&quot;&quot;&gt;
  ### 14 Functional areas
  - Paths, Basic Shapes, Text, Painting, Color, Gradients and patterns
  - Clipping, masking and compositing, Filter effects
  - Interactivity, Linking, Scripting, Animation
  - Fonts, Metadata
&lt;/section&gt;
&lt;section&gt;
  &lt;h3&gt; Typical SVG Element&lt;/h3&gt;
  &lt;pre&gt;&lt;code&gt;
  &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot;&gt;
    &lt;rect x=&quot;25&quot; y=&quot;25&quot; width=&quot;200&quot; height=&quot;200&quot; fill=&quot;lime&quot; stroke-width=&quot;4&quot; stroke=&quot;pink&quot; /&gt;
    &lt;circle cx=&quot;125&quot; cy=&quot;125&quot; r=&quot;75&quot; fill=&quot;orange&quot; /&gt;
    &lt;polyline points=&quot;50,150 50,200 200,200 200,100&quot; stroke=&quot;red&quot; stroke-width=&quot;4&quot; fill=&quot;none&quot; /&gt;
    &lt;line x1=&quot;50&quot; y1=&quot;50&quot; x2=&quot;200&quot; y2=&quot;200&quot; stroke=&quot;blue&quot; stroke-width=&quot;4&quot; /&gt;
  &lt;/svg&gt;
  &lt;/code&gt;&lt;/pre&gt;
&lt;/section&gt;
&lt;section data-markdown=&quot;&quot;&gt;
  ## Why Snap SVG
  - Snap.svg is a brand new JavaScript library for working with SVG
  - Snap provides web developers with a clean, streamlined, intuitive, and powerful API for animating and manipulating both existing SVG content, and SVG content generated with Snap.
  -  Snap was written entirely from scratch by the author of Raphaël (Dmitry Baranovskiy), and is designed specifically for modern browsers (IE9 and up, Safari, Chrome, Firefox, and Opera)
  - Use advantages of modern browser features (masking, clipping, patterns, full gradients, groups, and more)
&lt;/section&gt;
&lt;section&gt;
  &lt;h3&gt; Create a Snap JS Object &lt;/h3&gt;
  &lt;pre&gt;&lt;code&gt;
    var s = Snap(&quot;#svg&quot;);
  &lt;/code&gt;&lt;/pre&gt;
&lt;/section&gt;
&lt;section&gt;
  &lt;h3&gt;Simple Snap JS Element &lt;/h3&gt;
  &lt;pre&gt;&lt;code&gt;
  var s = Snap(&quot;#svg&quot;);
  // Lets create big circle in the middle:
  var bigCircle = s.circle(150, 150, 100);
  &lt;/code&gt;&lt;/pre&gt;
&lt;/section&gt;
&lt;section&gt;
  &lt;h3&gt;Snap SVG Elements&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt; Rectagle, Circle, Paths, Line &lt;/li&gt;
  &lt;/ul&gt;
&lt;/section&gt;
&lt;section&gt;
  &lt;h3&gt; Set Propertries for Snap SVG &lt;/h3&gt;
  &lt;pre&gt;
  &lt;code&gt;
    var s = Snap(&quot;#svg&quot;);
    // Lets create big circle in the middle:
    var bigCircle = s.circle(150, 150, 100);
    // By default its black, lets change its attributes
    bigCircle.attr({
        fill: &quot;#bada55&quot;,
        stroke: &quot;#000&quot;,
        strokeWidth: 5
    });
  &lt;/code&gt;
  &lt;/pre&gt;

&lt;/section&gt;
&lt;section&gt;
&lt;h3&gt;Create Multiple Elements &lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;
  var s = Snap(&quot;#svg&quot;);
  var bigCircle = s.circle(150, 150, 100);
  bigCircle.attr({
    fill: &quot;#bada55&quot;,
    stroke: &quot;#000&quot;,
    strokeWidth: 5
  });
  var smallCircle = s.circle(100, 150, 70);
&lt;/code&gt;
&lt;/pre&gt;
&lt;/section&gt;
&lt;section data-markdown=&quot;&quot;&gt;
- We use cordinates inside Snap Objects
- We use X,Y properties to set position
- For Polygun, Circle we have extra values
&lt;/section&gt;

&lt;section&gt;
&lt;h3&gt;Group SVG Elements&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;
  var discs = s.group(smallCircle, s.circle(200, 150, 70));
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;
  var c1 = paper.circle(),
  c2 = paper.rect(),
  g = paper.g();
  g.add(c2, c1);
&lt;/code&gt;&lt;/pre&gt;
&lt;/section&gt;
&lt;section&gt;
&lt;h3&gt; Group continue ....&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;
  var c1 = paper.circle(),
  c2 = paper.rect(),
  g = paper.g(c2, c1);
&lt;/code&gt;&lt;/pre&gt;
Using Groups we can set properties for all elements inside group
&lt;/section&gt;

&lt;section&gt;
&lt;h3&gt; Snap SVG Transformation &lt;/h3&gt;
 groupHouse.transform(&quot;s2, 50, 200&quot;)
&lt;pre&gt;&lt;code&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/section&gt;

&lt;section&gt;
&lt;h3&gt; Snap SVG Animation &lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;
groupHouse.animate({
    transform:&#39;s1.2,-400,-400&#39;,
    fill:&#39;#e51c71&#39;
  },2000,mina.easeinout, function(){
    // callback
    groupHouse.animate({
      transform:&#39;s1,0,0&#39;,
      fill:&#39;#e57f1c&#39;
    },1000)
  });
&lt;/code&gt;&lt;/pre&gt;

&lt;/section&gt;
&lt;section&gt;
&lt;h3&gt;Snap SVG Events&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;
treeBranches.click(function(){
alert(&quot;Hi! Tree Branch&quot;)
})

groupHouse.mouseover(function(){
alert(&quot;Moving on House&quot;)
})
&lt;/code&gt;&lt;/pre&gt;
&lt;/section&gt;
&lt;section&gt;
&lt;h3&gt;Snap SVG Event Handlers&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;
click, unclick, dbclick, mouseover, unmouseover, mouseup
&lt;/code&gt;&lt;/pre&gt;
&lt;/section&gt;

&lt;section&gt;
  &lt;h3&gt; Load External SVG Elements &lt;/h3&gt;
  &lt;pre&gt;&lt;code&gt;
  var s = Snap(&#39;#svg-external&#39;);
  // Lets create big circle in the middle:
  Snap.load(&#39;/images/mascot.svg&#39;, function(element){
  console.log(&quot;loaded&quot;)
  s.append(element)
  })
  &lt;/code&gt;&lt;/pre&gt;
&lt;/section&gt;

&lt;section&gt;
&lt;h3&gt;Snap SVG Ajax&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;
Snap.ajax(
      &#39;/page-snap-ajax.json&#39;,
      function(data){
        console.log(JSON.parse(data.response))
      }
    )
&lt;/code&gt;&lt;/pre&gt;

&lt;/section&gt;
&lt;section data-markdown=&quot;&quot;&gt;
### Reference
* [Snap SVG](http://snapsvg.io/)
&lt;/section&gt;
&lt;section data-markdown=&quot;&quot;&gt;
## Q&amp;amp;A
&lt;/section&gt;
&lt;section data-markdown=&quot;&quot;&gt;
### Q? Snap SVG Browser Support.
A: Snap SVG support only modern browser, It supports IE9 and up, Safari*, Chrome*, Firefox* and Opera* (* latest).This make Snap SVG to use browser features like masking, clipping, patters, gradients, groups etc..
&lt;/section&gt;
&lt;section data-markdown=&quot;&quot;&gt;
### Q? Which Type Animation used in Snap SVG.
A: Snap SVG use Javascript animation/ transition. It uses CSS3 properties like translateX, translate3D etc..
&lt;/section&gt;
&lt;section data-markdown=&quot;&quot;&gt;
### Q?  Why Snap SVG not support old browsers, Is their any alternate plugins.
A: Old browsers have only limited features, Snap SVG need more complex codes to implement same features on old browsers. Developers can&#39;t add modern browsers features. For old browsers like IE6, Raphael JS can use to create
SVG elements.
&lt;/section&gt;
&lt;section data-markdown=&quot;&quot;&gt;
### Q? Can we create Graphs, Charts, Pie Charts etc..
A: Graphs, Charts are complex elements, Using Snap SVG, users are able to create charts and graphs. There are many plugins like Highcharts, Chartist, easyPieChart available.
&lt;/section&gt;
&lt;section data-markdown=&quot;&quot;&gt;
### Q? Why we need Snap SVG
A: Snap SVG like plugins help user to build custom shapes, user friendly elements like Charts, Pie Charts, Gauge meters , Complex loading elements etc. User can use same Javascript events on SVG elements.
&lt;/section&gt;
</description>
        <pubDate>Sun, 20 Mar 2016 00:00:00 +0530</pubDate>
        <link>http://slides.redpanthers.co/slides/snap-svg-javascript-svg-plugin</link>
        <guid isPermaLink="true">http://slides.redpanthers.co/slides/snap-svg-javascript-svg-plugin</guid>
        
        
      </item>
    
      <item>
        <title>Advanced Git</title>
        <description>&lt;section data-markdown=&quot;&quot;&gt;
## Advanced Git

March 14 2016
&lt;/section&gt;

&lt;section&gt;
  &lt;h2&gt;Aparna V&lt;/h2&gt;
  &lt;p&gt;
    Ruby Developer Trainee @RedPanthers
  &lt;/p&gt;
&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
### Introduction
What is GIT?
- Distributed Version Control System.  
The basic Git workflow:
* Modify files in your working directory.
* You stage the files, adding snapshots of them to your staging area.
* You do a commit, which takes the files as they are in the staging area and stores that snapshot permanently to your Git directory.
&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
### Git merge
git-merge - Join two or more development histories together.
&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
### Merge with --ff and --no-ff  
--ff  
When the merge resolves as a fast-forward, only update the branch pointer, without creating a merge commit. This is the default behavior.  

--no-ff  
Create a merge commit even when the merge resolves as a fast-forward. This is the default behaviour when merging an annotated (and possibly signed) tag.  
&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
###FAST-FORWARD MERGE
Often the current branch head is an ancestor of the named commit. This is the most common case especially when invoked from git pull: you are tracking an upstream repository, you have committed no local changes, and now you want to update to a newer upstream revision. In this case, a new commit is not needed to store the combined history; instead, the HEAD (along with the index) is updated to point at the named commit, without creating an extra merge commit.
This behavior can be suppressed with the --no-ff option.
&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
### Rebase
As an alternative to merging,rebase the feature branch onto master branch using the following commands:
git checkout feature
* git rebase master
This moves the entire feature branch to begin on the tip of the master branch, effectively incorporating all of the new commits in master. But, instead of using a merge commit, rebasing re-writes the project history by creating brand new commits for each commit in the original branch.
&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
### Interactive Rebasing
Interactive rebasing gives you the opportunity to alter commits as they are moved to the new branch. This is even more powerful than an automated rebase, since it offers complete control over the branch’s commit history. Typically, this is used to clean up a messy history before merging a feature branch into master.

To begin an interactive rebasing session, pass the i option to the git rebase command:

git checkout feature
* git rebase -i master
&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
###The Golden Rule of Rebasing
 The golden rule of git rebase is to never use it on public branches.
&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
### Git-cherry-pick
* Apply the changes introduced by some existing commits.
What git cherry-pick does, basically, is take a commit from somewhere else, and &quot;play it back&quot; wherever you are right now.
git cherry-pick commit-hash

&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
### Git rerere
* The name stands for &quot;reuse recorded resolution&quot; and as the name implies, it allows you to ask Git to remember how you&#39;ve resolved a hunk conflict so that the next time it sees the same conflict, Git can automatically resolve it for you.

&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
### Git rerere --contd

* To enable the rerere functionality, you simply have to run this config setting:

* $ git config --global rerere.enabled true
* You can also turn it on by creating the .git/rr-cache directory in a specific repository, but I think the config setting is clearer, and it can be done globally.

&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
### Rebasing Vs Merging
Rebasing a branch on master:
* provides an incorrect idea of how commits were created  
* pollutes master with a bunch of intermediate commits that may not have been well tested
* makes finding good places in master to checkout difficult.
* Causes the timestamps on commits to not align with their chronological order in the tree.
&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;  
Merging a branch on master:
* preserves history of where topic branches were created, including any merges from master to the topic branch to help keep it current. You really get an accurate idea of what code the developer was working with when they were building.
* master is a branch made up mostly of merges, and each of those merge commits are typically &#39;good points&#39; in history that are safe to check out because that&#39;s where the topic branch was ready to be integrated.
&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
### Reference

* https://git-scm.com/docs/git-merge
* https://git-scm.com/docs/git-cherry-pick
* https://git-scm.com/book/en/v2/Git-Branching-Rebasing
* https://www.git-tower.com/blog/understanding-rebase-merge-in-git/
* https://git-scm.com/book/en/v2/Git-Branching-Basic-Branching-and-Merging
* https://git-scm.com/blog/2010/03/08/rerere.html
* https://www.atlassian.com/git/tutorials/advanced-overview

&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
## Thank you
&lt;/section&gt;
</description>
        <pubDate>Mon, 14 Mar 2016 00:00:00 +0530</pubDate>
        <link>http://slides.redpanthers.co/slides/Advanced-git</link>
        <guid isPermaLink="true">http://slides.redpanthers.co/slides/Advanced-git</guid>
        
        
      </item>
    
      <item>
        <title>Goal Analyzer</title>
        <description>&lt;section data-markdown=&quot;&quot;&gt;
# Goalsheet Analyzer

Mar 11, 2016
&lt;/section&gt;

&lt;!-- Just to show that markdown and html can be mixed --&gt;
&lt;section&gt;
  &lt;h4&gt;Hi, I am&lt;/h4&gt;
  &lt;h3&gt;Ajay Joseph&lt;/h3&gt;
  &lt;div style=&quot;width:150%;&quot;&gt;
    &lt;div style=&quot;float:left; width:30%;&quot;&gt;
      &lt;img alt=&quot;Ajay Joseph&quot; src=&quot;https://scontent-hkg3-1.xx.fbcdn.net/hphotos-frc3/v/t1.0-9/945390_3255807009318_1975357127_n.jpg?oh=1cbfba3bef55ba6fa91cb048a4808622&amp;amp;oe=5747C14D&quot; style=&quot;float: left; width:400px; height:400px;&quot; /&gt;
    &lt;/div&gt;
    &lt;div style=&quot;float:right; width:70%;&quot;&gt;
      &lt;ul style=&quot;float: left; padding-top: 4%;&quot;&gt;
          &lt;li&gt;Ruby Devoloper Trainee at Redpanthers&lt;/li&gt;

      &lt;/ul&gt;
    &lt;/div&gt;
  &lt;/div&gt;

&lt;/section&gt;

&lt;section&gt;
  &lt;h4&gt;Hi, I am&lt;/h4&gt;
  &lt;h3&gt;Juliat Joy&lt;/h3&gt;
  &lt;div style=&quot;width:150%;&quot;&gt;
    &lt;div style=&quot;float:left; width:30%;&quot;&gt;
      &lt;img alt=&quot;Juliat Joy&quot; src=&quot;https://avatars2.githubusercontent.com/u/7353124?v=3&amp;amp;u=6eeeedc3e9ecfbf20e6dcd128ea7344ed9261f49&amp;amp;s=140&quot; style=&quot;float: left; width:400px; height:400px;&quot; /&gt;
    &lt;/div&gt;
    &lt;div style=&quot;float:right; width:70%;&quot;&gt;
      &lt;ul style=&quot;float: left; padding-top: 4%;&quot;&gt;
          &lt;li&gt;Ruby Devoloper Trainee at Redpanthers&lt;/li&gt;

      &lt;/ul&gt;
    &lt;/div&gt;
  &lt;/div&gt;

&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
### What goalsheet is?

Goalsheet is an app where we can see our goalsheets for the corresponding day, week or month. Which also helps us to know how much of our tasks are completed. Only admin can see all the goalsheets.

&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
### Why goalsheet?

Goalsheet helps us to see our goalsheets and goals.

&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
### Difficulties faced

* has_many_through
* Absence of rails view
* Curl requests
* Testing
* react and flux

&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
### Application design

In our project we have mainly users, goals, goalsheets and teams model.
* Where a goal can have a user and belongs to a goalsheet.
* Where a goalsheet may belong to a team or a user and has many goals.
* Where a team can have many goals and users.

&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
### view

We buid json view for goalsheet using jbuilder, which is handled by react and flux framework in front end.

&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
### Why jbuider?

It is simple and has a more approchable concept.

&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
### contd..

For json handling there are 3 approches they are
* Active Model Serializers(AMS)
* Rabl
* Jbuilder
&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
### Active Model Serializers(AMS)

* Separates the serialization concern into its own folder /app/serializers
* It comes with its own Rails generator
* It behaves more like ActiveRecord in that you can define associations in the serializer

&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
### Rabl

RABL&#39;s DSL is generally less favored than Jbuilder&#39;s, there can be difficulty in getting started, and in later maintenance. Jbuilder&#39;s DSL is simpler and easier to learn/use, but the general consensus appears to be that Jbuilder is easier to pick up and run with.
&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
### Jbuilder

* It considers JSON format construction as just another Rails view
* Builds responses in the corresponding /app/views/ directories just like we do with view templates
* It can take on many of the characteristics of a view template, like understanding what current_user is, chaining relations (@user.posts)... etc

&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
### Documentation of API

Well documented APIs enhance the experience for developers and have become an essential requirement for defining an API&#39;s success. Good documentation is no longer just about clarity but also improving the affordance of documents as live API experiences for developers.

&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
### Swagger

With the Swagger framework, the server, client and documentation team can be in synchronization simultaneously.

&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
### contd

As Swagger is a language-agnostic specification, with its declarative resource specification, clients can easily understand and consume services without any prior knowledge of server implementation or access to the server code.

&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
### Testing

&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
### Unit Testing

A unit is the smallest testable part of software. It usually has one or a few inputs and usually a single output. The smallest unit is a method, which may belong to a base/ super class, abstract class or derived/ child class. Unit Testing is the first level of testing and is performed prior to Integration Testing.

&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
### Integeration Testing

Integration tests are used to test the interaction among any number of controllers. They are generally used to test important work flows within your application.

&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
### Controller specs

A controller spec is an RSpec wrapper for a Rails functional test.

&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
### contd

It allows you to simulate a single http request in each example, and then
specify expected outcomes such as:

* rendered templates
* redirects
* instance variables assigned in the controller to be shared with the view
* cookies sent back with the response

&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
### contd

To specify outcomes, you can use:

* standard rspec matchers (expect(response.status).to eq(200))
* standard test/unit assertions (assert_equal 200, response.status)
* rails assertions (assert_response 200)
* rails-specific matchers:

&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
### Model specs

It includes all of the behavior and assertions that it provides.

&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
### Request specs

Request specs provide a thin wrapper around Rails&#39; integration tests, and are
designed to drive behavior through the full stack, including routing

&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
### contd

With request specs, you can:

* specify a single request
* specify multiple requests across multiple controllers
* specify multiple requests across multiple sessions


&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
### Stubs and Mocks

Hitting the database or spinning up a UI for every test can make your test suite too slow, which either slows down productivity or encourages you to not run your tests as often

&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
### Stub

A stub can be told to return a specified fake value when a given method is called. If your test subject requires a companion object to provide some sort of data, you can use a stub to “stub out” that data source and return consistent fake data in your test setup.


&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
### Mock

A mock is similar to a spy, but the way you use it differs slightly. Rather than just capturing all method calls and letting you write assertions on them after the fact, a mock typically requires you to set up expectations beforehand. You tell it what you expect it to happen, execute the code you’re testing, and then verify that the correct behavior happened.

&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
### Shared examples

* Shared examples describe behaviour of classes or modules.
* Shared examples make testing compositions of objects much easier. They allow us to execute the same group of expectations against several classes.
* By Convention we place the files containing shared examples in spec/support/
and require files in that directory from spec/spec_helper.rb

&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
### Why react?

React is faster and write-less-do-more than angular. Being faster makes it preferable for mobile clients. It beats angular when memory is limited.

&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
### contd

React uses VDOM(virtual DOM) which results in much better performance than angular rendering views. React is used to create user interfaces, one can use react as V in Angular. React performs DOM modifications only when they are really necessary


&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
### References

http://guides.rubyonrails.org/association_basics.html
http://stackoverflow.com/questions/26097563/jbuilder-vs-rails-api-active-model-serializers-for-json-handling-in-rails-4
http://swagger.io/
https://www.relishapp.com
http://stackoverflow.com/questions/3459287/whats-the-difference-between-a-mock-stub
https://facebook.github.io/react/docs/why-react.html
&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
##Thank you :)

&lt;/section&gt;
</description>
        <pubDate>Thu, 10 Mar 2016 00:00:00 +0530</pubDate>
        <link>http://slides.redpanthers.co/slides/goal-analyzer/</link>
        <guid isPermaLink="true">http://slides.redpanthers.co/slides/goal-analyzer/</guid>
        
        
      </item>
    
      <item>
        <title>Polymer JS</title>
        <description>&lt;section data-markdown=&quot;&quot;&gt;
## Polymer JS
&lt;/section&gt;
&lt;section&gt;
  &lt;h4&gt;Sibin Xavier&lt;/h4&gt;
  &lt;p&gt;
    Frontend Developer
  &lt;/p&gt;
&lt;/section&gt;
&lt;section data-markdown=&quot;&quot;&gt;
### What is Polymer JS
The Polymer library is designed to make it easier and faster for developers to create great,
reusable components for the modern web.
&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
### HTML and HTML 5

- Form , Inputs , Paragraph
- Video , Canvas , Audio  - HTML 5

These Elements have it&#39;s own apis, form , input have different type of javascript apis

&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
## Complex website need more complex elements

- Like Sidebar, Navbar, Chat Windows
- Developers build their own solutions, but many features are common

### Reusable Components
With custom elements, you can extend the vocabulary of HTML with your own elements.
Elements that provide sophisticated UI.
&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
## Polymer JS

It is a collection of web components, We can build custom components which uses
Shady DOM, faster than normal DOM and lighter
&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
### Shadow DOM

- Shadow DOM provides encapsulation
for the JavaScript, CSS, and templating in a Web Component.
- Shadow DOM makes it so these things remain separate
from the DOM of the main document.
&lt;/section&gt;
&lt;section data-markdown=&quot;&quot;&gt;
### Tree-scoping

- Tree-scoping is the ability to take a DOM subtree and hide it
from the main document scope
Jquery

&lt;figure class=&quot;code-highlight-figure&quot;&gt;&lt;div class=&quot;code-highlight&quot;&gt;&lt;pre class=&quot;code-highlight-pre&quot;&gt;&lt;div data-line=&quot;1&quot; class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;x-fade&amp;gt;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line=&quot;2&quot; class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line=&quot;3&quot; class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;cool.jpg&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line=&quot;4&quot; class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line=&quot;5&quot; class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;lt;canvas&amp;gt;&amp;lt;/canvas&amp;gt;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line=&quot;6&quot; class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/x-fade&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;


Shadown DOM

&lt;figure class=&quot;code-highlight-figure&quot;&gt;&lt;div class=&quot;code-highlight&quot;&gt;&lt;pre class=&quot;code-highlight-pre&quot;&gt;&lt;div data-line=&quot;1&quot; class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;x-fade&amp;gt;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line=&quot;2&quot; class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;cool.png&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line=&quot;3&quot; class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/x-fade&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
## With Tree Scoping
-Details of the implementation are hidden.
-Queries over the document will not see the canvas or the div.
-The new nodes are not affected by stylesheets, because they are not in the document scope.
-The img node will not lose styling, because it never moves.
-The developer can add a new img or replace the old one, it’s just a regular child of x-fade

&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
### Shadow DOM Real Picture
&lt;figure class=&quot;code-highlight-figure&quot;&gt;&lt;div class=&quot;code-highlight&quot;&gt;&lt;pre class=&quot;code-highlight-pre&quot;&gt;&lt;div data-line=&quot;1&quot; class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;x-fade&amp;gt;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line=&quot;2&quot; class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;cool.png&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line=&quot;3&quot; class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;  #shadow-root
&lt;/div&gt;&lt;/div&gt;&lt;div data-line=&quot;4&quot; class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line=&quot;5&quot; class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;      &lt;span class=&quot;nt&quot;&gt;&amp;lt;content&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;select=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;img&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line=&quot;6&quot; class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line=&quot;7&quot; class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;lt;canvas&amp;gt;&amp;lt;/canvas&amp;gt;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line=&quot;8&quot; class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/x-fade&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
### Why Shady DOM

- Shadow DOM is not developed as Standard, Not Common in All browser
- Lots of code required to polyfill Shadow DOM
- It’s slow to indirect all the DOM API.
- Structures like NodeList can simply not be emulated.
- There are certain accessors that cannot be overwritten (for example, window.document, window.document.body).
- The polyfill returns objects that are not actually Nodes, but Node proxies, which can be very confusing.
&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
### Shady DOM
- Originated from idea of Shadow DOM
- Shady DOM and Shadow DOM are compatible
- Once Shadow DOM is common, Shady DOM use its features
- &#39;Examine it using the shady DOM API&#39; to see Shadow DOM
-
&lt;figure class=&quot;code-highlight-figure&quot;&gt;&lt;div class=&quot;code-highlight&quot;&gt;&lt;pre class=&quot;code-highlight-pre&quot;&gt;&lt;div data-line=&quot;1&quot; class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;var arrayOfNodes = Polymer.dom(x-fade).children;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
## Polymer Elements
- Iron Elements
- Paper Elements
- Google Web Components
- Gold Elements
- Neon Elements
- Platinum Elements
- Molecules
&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
## Polymer JS Events
  - Support all Javascript events
&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
## Polymer Styles
- Isolated styles for elements
&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
## Data Binding  - Syntax
- One Way Bind [[]]
- Two way binding 
&lt;/section&gt;
&lt;section data-markdown=&quot;&quot;&gt;
## Data Binding - Helper functions
### DOM-REPEAT

&lt;figure class=&quot;code-highlight-figure&quot;&gt;&lt;div class=&quot;code-highlight&quot;&gt;&lt;pre class=&quot;code-highlight-pre&quot;&gt;&lt;div data-line=&quot;1&quot; class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;template&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;is=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;dom-repeat&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;items=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;#x7b;&amp;#x7b;employees&amp;#x7d;&amp;#x7d;&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line=&quot;2&quot; class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;# &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&amp;gt;&lt;/span&gt;&amp;#x7b;&amp;#x7b;index&amp;#x7d;&amp;#x7d;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line=&quot;3&quot; class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;First name: &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&amp;gt;&lt;/span&gt;&amp;#x7b;&amp;#x7b;item.first&amp;#x7d;&amp;#x7d;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line=&quot;4&quot; class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;Last name: &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&amp;gt;&lt;/span&gt;&amp;#x7b;&amp;#x7b;item.last&amp;#x7d;&amp;#x7d;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line=&quot;5&quot; class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
## Data binding - Helper functions
### DOM-IF

&lt;figure class=&quot;code-highlight-figure&quot;&gt;&lt;div class=&quot;code-highlight&quot;&gt;&lt;pre class=&quot;code-highlight-pre&quot;&gt;&lt;div data-line=&quot;1&quot; class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;template&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;is=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;dom-if&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;if=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;#x7b;&amp;#x7b;user.isAdmin&amp;#x7d;&amp;#x7d;&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line=&quot;2&quot; class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;  Only admins will see this.
&lt;/div&gt;&lt;/div&gt;&lt;div data-line=&quot;3&quot; class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;&amp;#x7b;&amp;#x7b;user.secretAdminStuff&amp;#x7d;&amp;#x7d;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line=&quot;4&quot; class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;/section&gt;
&lt;section data-markdown=&quot;&quot;&gt;
### Reference

* [PolymerJS](https://www.polymer-project.org/)
* [Shadow &amp;amp;&amp;amp; Shady DOM](http://glazkov.com/2011/01/14/what-the-heck-is-shadow-dom/)
&lt;/section&gt;
</description>
        <pubDate>Sun, 06 Mar 2016 00:00:00 +0530</pubDate>
        <link>http://slides.redpanthers.co/slides/polymer-js</link>
        <guid isPermaLink="true">http://slides.redpanthers.co/slides/polymer-js</guid>
        
        
      </item>
    
      <item>
        <title>Meteor JS</title>
        <description>&lt;section data-markdown=&quot;&quot;&gt;
### Meteor Javascript Framework
&lt;/section&gt;
&lt;section&gt;
	&lt;h4&gt;Sibin Xavier&lt;/h4&gt;
	&lt;p&gt;
		Frontend Developer
	&lt;/p&gt;
&lt;/section&gt;
&lt;section data-markdown=&quot;&quot;&gt;
### Frameworks
#### Web Frameworks
- Ruby On Rails, Laravel, Django, Zend, Yii, Symphony...
&lt;/section&gt;
&lt;section data-markdown=&quot;&quot;&gt;
####  Meteor JS is a complete Javascript Framework
- Use HTML,CSS, Javascript and MongoDB
&lt;/section&gt;
&lt;section data-markdown=&quot;&quot;&gt;
### Node JS , Mongo DB, Javascript Template engines, Javascript View Frameworks
&lt;/section&gt;
&lt;section data-markdown=&quot;&quot;&gt;
### Javascript Web Technologies
#### Meteor and MEAN ( MonogoDB Express Angular NodeJS)
&lt;/section&gt;
&lt;section data-markdown=&quot;&quot;&gt;
### Node JS
- Server side Javascript
- Originated from Chrome&#39;s Webkit engine
&lt;/section&gt;
&lt;section data-markdown=&quot;&quot;&gt;
### Mongo DB
- No SQL Database
- Stores as Object
- No Columns and Rows
&lt;/section&gt;
&lt;section data-markdown=&quot;&quot;&gt;
### Javascript Template Engines
- React JS, Handlebar , Blaze
&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
#### Meteor
- Cross Platform application - Windows, Linux and Mac
- Executable meteor application available on Windows

&lt;/section&gt;
&lt;section data-markdown=&quot;&quot;&gt;
#### Meteor command
##### Basic
&amp;gt; Meteor

- `create`, `run`

##### Install packages
&amp;gt; Meteor

- `add`, `remove`, `update`
&lt;/section&gt;
&lt;section data-markdown=&quot;&quot;&gt;
#### Create Application

&amp;gt;
`meteor create app-name`

&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
#### Server and Client side codes
##### Client
&lt;figure class=&quot;code-highlight-figure&quot;&gt;&lt;div class=&quot;code-highlight&quot;&gt;&lt;pre class=&quot;code-highlight-pre&quot;&gt;&lt;div data-line=&quot;1&quot; class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;if(Meteor.isClient)&amp;#x7b;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line=&quot;2&quot; class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;	// work only in client side web browser or mobile devices
&lt;/div&gt;&lt;/div&gt;&lt;div data-line=&quot;3&quot; class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;&amp;#x7d;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

##### Server
&lt;figure class=&quot;code-highlight-figure&quot;&gt;&lt;div class=&quot;code-highlight&quot;&gt;&lt;pre class=&quot;code-highlight-pre&quot;&gt;&lt;div data-line=&quot;1&quot; class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;if(Meteor.isServer)&amp;#x7b;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line=&quot;2&quot; class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;	// work only in server, like PHP, Ruby
&lt;/div&gt;&lt;/div&gt;&lt;div data-line=&quot;3&quot; class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;&amp;#x7d;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;


&lt;/section&gt;
&lt;section data-markdown=&quot;&quot;&gt;
#### Ease of Use
###### Can use folder structure
- client - html,css, subscribe, calles
- server - methods, publish, restirction , collection
- public - images,fonts
- lib - common collection
- private  - secure contents, can asses using `Asset`
&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
#### Routes/ Routing
- Iron Router
- Flow Router
&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
#### Flow Router

`meteor add kadira:flow-router`

&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
#### Flow Router Config

&lt;figure class=&quot;code-highlight-figure&quot;&gt;&lt;div class=&quot;code-highlight&quot;&gt;&lt;pre class=&quot;code-highlight-pre&quot;&gt;&lt;div data-line=&quot;1&quot; class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;&lt;span class=&quot;nx&quot;&gt;FlowRouter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;/blog/:cat/:id&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;#x7b;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line=&quot;2&quot; class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;    &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;blogPostRoute&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line=&quot;3&quot; class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;		&lt;span class=&quot;nx&quot;&gt;subscriptions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;#x7b;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line=&quot;4&quot; class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line=&quot;5&quot; class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;    &lt;span class=&quot;p&quot;&gt;&amp;#x7d;,&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line=&quot;6&quot; class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;		&lt;span class=&quot;nx&quot;&gt;triggersEnter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;localeCheck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line=&quot;7&quot; class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;		&lt;span class=&quot;nx&quot;&gt;triggersLeave&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;localeCheck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line=&quot;8&quot; class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;    &lt;span class=&quot;nx&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;queryParams&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;#x7b;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line=&quot;9&quot; class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;			&lt;span class=&quot;c1&quot;&gt;// Render Template Logic, Subscription&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line=&quot;10&quot; class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;			&lt;span class=&quot;nx&quot;&gt;BlazeLayout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;componentLayout&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;#x7b;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;login&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;#x7d;);&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line=&quot;11&quot; class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;    &lt;span class=&quot;p&quot;&gt;&amp;#x7d;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line=&quot;12&quot; class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;&lt;span class=&quot;p&quot;&gt;&amp;#x7d;)&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;


&lt;figure class=&quot;code-highlight-figure&quot;&gt;&lt;div class=&quot;code-highlight&quot;&gt;&lt;pre class=&quot;code-highlight-pre&quot;&gt;&lt;div data-line=&quot;1&quot; class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;&quot;/blog/meteor/abc?show=yes&amp;amp;color=black&quot;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;


&lt;/section&gt;
&lt;section data-markdown=&quot;&quot;&gt;
#### Flow Router properties, helpers
- FlowRouter.go(&#39;/&#39;)
- FlowRouter.getParam(paramName);
- FlowRouter.getQueryParam(queryStringKey);
- FlowRouter.path(pathDef, params, queryParams)
- FlowRouter.url(pathDef, params, queryParams)
- FlowRouter.getRouteName()
&lt;/section&gt;
&lt;section data-markdown=&quot;&quot;&gt;
#### Flow Router Contd..
&lt;figure class=&quot;code-highlight-figure&quot;&gt;&lt;div class=&quot;code-highlight&quot;&gt;&lt;pre class=&quot;code-highlight-pre&quot;&gt;&lt;div data-line=&quot;1&quot; class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;FlowRouter.notFound = &amp;#x7b;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line=&quot;2&quot; class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;		// Subscriptions registered here don&#39;t have Fast Render support.
&lt;/div&gt;&lt;/div&gt;&lt;div data-line=&quot;3&quot; class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;		subscriptions: function() &amp;#x7b;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line=&quot;4&quot; class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line=&quot;5&quot; class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;		&amp;#x7d;,
&lt;/div&gt;&lt;/div&gt;&lt;div data-line=&quot;6&quot; class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;		action: function() &amp;#x7b;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line=&quot;7&quot; class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line=&quot;8&quot; class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;		&amp;#x7d;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line=&quot;9&quot; class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;&amp;#x7d;;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;/section&gt;
&lt;section data-markdown=&quot;&quot;&gt;
#### Flow Router helper for Template
- subsReady
- isSubReady (deprecated)
- pathFor
- urlFor
- param
- queryParam
- currentRouteName

&lt;figure class=&quot;code-highlight-figure&quot;&gt;&lt;div class=&quot;code-highlight&quot;&gt;&lt;pre class=&quot;code-highlight-pre&quot;&gt;&lt;div data-line=&quot;1&quot; class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;&amp;lt;a href=&quot;&amp;#x7b;&amp;#x7b;pathFor &#39;routeName&#39; params=params query params&amp;#x7d;&amp;#x7d;&quot;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line=&quot;2&quot; class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line=&quot;3&quot; class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;id=3 name=&quot;John Doe&quot;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;/section&gt;
&lt;section data-markdown=&quot;&quot;&gt;
#### Template
- Blaze Template
- Reusable Components
&lt;figure class=&quot;code-highlight-figure&quot;&gt;&lt;div class=&quot;code-highlight&quot;&gt;&lt;pre class=&quot;code-highlight-pre&quot;&gt;&lt;div data-line=&quot;1&quot; class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;&amp;lt;template name=&quot;templateName&quot;&amp;gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line=&quot;2&quot; class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;	// html codes
&lt;/div&gt;&lt;/div&gt;&lt;div data-line=&quot;3&quot; class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;&amp;lt;/template&amp;gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;/section&gt;
&lt;section data-markdown=&quot;&quot;&gt;
#### Temaplete Helpers
&lt;figure class=&quot;code-highlight-figure&quot;&gt;&lt;div class=&quot;code-highlight&quot;&gt;&lt;pre class=&quot;code-highlight-pre&quot;&gt;&lt;div data-line=&quot;1&quot; class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;&amp;#x7b;&amp;#x7b;#if booleanValue&amp;#x7d;&amp;#x7d;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line=&quot;2&quot; class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line=&quot;3&quot; class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;&amp;#x7b;&amp;#x7b; else&amp;#x7d;&amp;#x7d;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line=&quot;4&quot; class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line=&quot;5&quot; class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;&amp;#x7b;&amp;#x7b;/if&amp;#x7d;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;


&lt;figure class=&quot;code-highlight-figure&quot;&gt;&lt;div class=&quot;code-highlight&quot;&gt;&lt;pre class=&quot;code-highlight-pre&quot;&gt;&lt;div data-line=&quot;1&quot; class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;&amp;#x7b;&amp;#x7b;#each array|object &amp;#x7d;&amp;#x7d;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line=&quot;2&quot; class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;	- this.objectProperties
&lt;/div&gt;&lt;/div&gt;&lt;div data-line=&quot;3&quot; class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;	- @index
&lt;/div&gt;&lt;/div&gt;&lt;div data-line=&quot;4&quot; class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;&amp;#x7b;&amp;#x7b;/each&amp;#x7d;&amp;#x7d;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;/section&gt;
&lt;section data-markdown=&quot;&quot;&gt;
#### Meteor Template Helpers

&lt;figure class=&quot;code-highlight-figure&quot;&gt;&lt;div class=&quot;code-highlight&quot;&gt;&lt;pre class=&quot;code-highlight-pre&quot;&gt;&lt;div data-line=&quot;1&quot; class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;Template.templateName.helpers(&amp;#x7b;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line=&quot;2&quot; class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;		teams: function()&amp;#x7b;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line=&quot;3&quot; class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;			return array
&lt;/div&gt;&lt;/div&gt;&lt;div data-line=&quot;4&quot; class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;		&amp;#x7d;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line=&quot;5&quot; class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;&amp;#x7d;)&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;figure class=&quot;code-highlight-figure&quot;&gt;&lt;div class=&quot;code-highlight&quot;&gt;&lt;pre class=&quot;code-highlight-pre&quot;&gt;&lt;div data-line=&quot;1&quot; class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;&amp;#x7b;&amp;#x7b;#each teams&amp;#x7d;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line=&quot;2&quot; class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line=&quot;3&quot; class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line=&quot;4&quot; class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;&amp;#x7b;&amp;#x7b;/each&amp;#x7d;&amp;#x7d;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;


&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
#### Meteor Template Events
&lt;figure class=&quot;code-highlight-figure&quot;&gt;&lt;div class=&quot;code-highlight&quot;&gt;&lt;pre class=&quot;code-highlight-pre&quot;&gt;&lt;div data-line=&quot;1&quot; class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;Template.templateName.events(&amp;#x7b;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line=&quot;2&quot; class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;	&#39;click selector&#39;: function()&amp;#x7b;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line=&quot;3&quot; class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line=&quot;4&quot; class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;	&amp;#x7d;,
&lt;/div&gt;&lt;/div&gt;&lt;div data-line=&quot;5&quot; class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;	&#39;submit form selector&#39;: function()&amp;#x7b;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line=&quot;6&quot; class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line=&quot;7&quot; class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;	&amp;#x7d;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line=&quot;8&quot; class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line=&quot;9&quot; class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;&amp;#x7d;)
&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;/section&gt;
&lt;section data-markdown=&quot;&quot;&gt;
#### Meteor Template Events
&lt;figure class=&quot;code-highlight-figure&quot;&gt;&lt;div class=&quot;code-highlight&quot;&gt;&lt;pre class=&quot;code-highlight-pre&quot;&gt;&lt;div data-line=&quot;1&quot; class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;Template.templateName.onCreated
&lt;/div&gt;&lt;/div&gt;&lt;div data-line=&quot;2&quot; class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;Template.templateName.onRendered
&lt;/div&gt;&lt;/div&gt;&lt;div data-line=&quot;3&quot; class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;Template.templateName.onDestroyed
&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
#### Mongo
&lt;figure class=&quot;code-highlight-figure&quot;&gt;&lt;div class=&quot;code-highlight&quot;&gt;&lt;pre class=&quot;code-highlight-pre&quot;&gt;&lt;div data-line=&quot;1&quot; class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;Task = new Meteor.Collection(&#39;tasks&#39;)
&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;/section&gt;
&lt;section data-markdown=&quot;&quot;&gt;
#### Mongo CRUD
- Task.insert()
- Task.update(id,{updatedData})
- Task.remove({})
- Task.remove({_id:id})
&lt;/section&gt;
&lt;section data-markdown=&quot;&quot;&gt;
#### Mongo Read
- Task.find({}).fetch() -&amp;gt; array
- Task.find({selector},{options})
&lt;/section&gt;
&lt;section data-markdown=&quot;&quot;&gt;
#### Mongo Read Selector

- {_id: id, name:name}
&lt;/section&gt;
&lt;section data-markdown=&quot;&quot;&gt;
#### Mongo Read Options
- limit
- skip (Meteor)
- sort
&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
#### Authetication

##### Meteor Account packages
- Username/Password, Facebook, Twitter

&lt;/section&gt;
&lt;section data-markdown=&quot;&quot;&gt;
#### Roles

##### Meteor Roles Packages

&lt;/section&gt;
&lt;section data-markdown=&quot;&quot;&gt;
#### Extend/ Improve meteor Applications
- Use Pckages
- Use alternate Template Engines
&lt;/section&gt;
&lt;section data-markdown=&quot;&quot;&gt;
#### Thanks
&lt;/section&gt;
&lt;section data-markdown=&quot;&quot;&gt;
### Reference
* [Meteor](https://www.meteor.com/)
* [Iron Router](https://github.com/iron-meteor/iron-router)
* [Flow Router](https://github.com/kadirahq/flow-router)
* [Blaze Layout](https://github.com/kadirahq/blaze-layout)
* [Flow Router Helpers](https://github.com/arillo/meteor-flow-router-helpers)
&lt;/section&gt;
</description>
        <pubDate>Fri, 26 Feb 2016 00:00:00 +0530</pubDate>
        <link>http://slides.redpanthers.co/slides/meteor-framework</link>
        <guid isPermaLink="true">http://slides.redpanthers.co/slides/meteor-framework</guid>
        
        
      </item>
    
      <item>
        <title>Graphql</title>
        <description>&lt;section data-markdown=&quot;&quot;&gt;
# Graphql

Feb 21, 2016
&lt;/section&gt;

&lt;!-- Just to show that markdown and html can be mixed --&gt;
&lt;section&gt;
  &lt;h4&gt;Hi, I am&lt;/h4&gt;
  &lt;h3&gt;Juliat Joy&lt;/h3&gt;
  &lt;div style=&quot;width:150%;&quot;&gt;
    &lt;div style=&quot;float:left; width:30%;&quot;&gt;
      &lt;img alt=&quot;Juliat Joy&quot; src=&quot;https://avatars2.githubusercontent.com/u/7353124?v=3&amp;amp;u=6eeeedc3e9ecfbf20e6dcd128ea7344ed9261f49&amp;amp;s=140&quot; style=&quot;float: left; width:400px; height:400px;&quot; /&gt;
    &lt;/div&gt;
    &lt;div style=&quot;float:right; width:70%;&quot;&gt;
      &lt;ul style=&quot;float: left; padding-top: 4%;&quot;&gt;
          &lt;li&gt;Ruby Devoloper Trainee at Redpanthers&lt;/li&gt;

      &lt;/ul&gt;
    &lt;/div&gt;
  &lt;/div&gt;

&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
### GraphQl

GraphQl is a data query and data manipulation language for client applications.GraphQL is an application layer query language from Facebook. GrpahQl is not tied with a database. With GraphQL, you can define your backend as a well-defined graph-based schema. Then client applications can query your dataset as they are needed.

&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
### contd...

We don&#39;t need to change our backend for data requirement changes in client apps. This simply solves one of the biggest problems in managing REST API.

&lt;/section&gt;

&lt;section&gt;

&lt;img src=&quot;/slides/images/GraphQl.png&quot; /&gt;

&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
### contd...

GraphQL is a specification so, it can be used with any platform and any language. It has a reference implementation on JavaScript, maintained by Facebook.

&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
### What problems does GraphQl try to solve

* Client-side developers should have a way to ask for the data they need.
* Server-side developers should have a way to expose the data they have.
* There should be an easy and efficient way to query data (the REST API consumes a lot of resources, especially with mobile apps).

&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
### We will see how Graphql works


At the heart of any GraphQL implementation is a description of what types of objects it can return, described in a GraphQL type system and returned in the GraphQL Schema.

  ```type Student {
  name: String
}```

&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
### contd ...

  A common pattern in many APIs, and indeed in GraphQL is to give objects an ID that can be used to refetch the object.

  ```type Student {
  id: String
  name: String
}```


&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
### contd...

  Now thing in this particular school there are only 8th 9th and 10th standard.
  So we have to define an enum for standard

  ```enum Standard { 8th, 9th, 10th}```

  Now we will add a field to Student describing what standard they are in.

  ```type Student {
  id: String
  name: String
  appearsIn: [standard]
}```

&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
### Graphql

  When we define a schema, we define an object type that is the basis for all queries. The name of this type is Query by convention, and it describes our public, top-level API. Our Query type for this example will look like this:

  ```type Query {
  student(id: String!): Student
}```

&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
### Query syntax

An example query on the above schema would be:

  ```query StudentNameQuery {
  student {
    name
  }
}```

The initial line, query StudentNameQuery, defines a query with the operation name StudentNameQuery that starts with the schema&#39;s root query type; in this case, Query.
&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
### contd...

The result of this query would then be:

  ```{
  &quot;student&quot;: {
    &quot;name&quot;: &quot;R2-D2&quot;
  }
}```


&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
  ### contd...

  One of the key aspects of GraphQL is its ability to nest queries.

  ```
    query NestedQuery {
      student{
        name
        friends {
          name
          appearsIn
          friends {
            name
          }
        }
      }
    }
  ```
&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
  ### contd...

  ```
    {
      &quot;student&quot;: {
        &quot;name&quot;: &quot;Ram&quot;,
        &quot;friends&quot;: [
          {
            &quot;name&quot;: &quot;Luke&quot;,
            &quot;appearsIn&quot;: [ &quot;8th&quot; ],
            &quot;friends&quot;: [
              { &quot;name&quot;: &quot;Han&quot; },
              { &quot;name&quot;: &quot;Leia&quot; },
              { &quot;name&quot;: &quot;Krishna&quot; },
              { &quot;name&quot;: &quot;Mujeeb&quot; }
            ]
          },
          {
            &quot;name&quot;: &quot;Han&quot;,
            &quot;appearsIn&quot;: [ &quot;10th&quot; ],
            &quot;friends&quot;: [
              { &quot;name&quot;: &quot;Luke&quot; },
              { &quot;name&quot;: &quot;Lei Organa&quot; },
              { &quot;name&quot;: &quot;Neethu&quot; }
            ]
          },
          {
            &quot;name&quot;: &quot;Leia&quot;,
            &quot;appearsIn&quot;: [ &quot;8th&quot; ],
            &quot;friends&quot;: [
              { &quot;name&quot;: &quot;Luke&quot; },
              { &quot;name&quot;: &quot;Han&quot; }
            ]
          }
        ]
      }
    }
  ```
&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
### contd...

The Query type above defined a way to fetch a student given their ID. We can use it by hardcoding the ID in the query:

  ```
    query FetchLukeQuery {
      student(id: &quot;1000&quot;) {
        name
      }
    }
  ```
to get

  ```
    {
      &quot;student&quot;: {
        &quot;name&quot;: &quot;Luke Skywalker&quot;
      }
    }
  ```

&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
### Drawbacks

It misses the ability to update clients reactively. In the GraphQL spec, there is no way to subscribe and get updates. Right now, to achieve real-time updates, we need to poll the server and get the changes.

&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
### Setup

Make a demo folder

  ```
    mkdir graphql-demo
    cd graphql-demo
  ```
&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
### contd...

We have to install 3 packages

* graphql, the reference implementation of GraphQL in JS

* express, a basic web framework.

* express-graphql, middleware for express to make it easy to expose a GraphQL server.

&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
### contd...

Install 3 packages

  ```
    npm init -f
    npm install graphql --save
    npm install express --save
    npm install express-graphql --save
  ```
&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
### References

http://hueypetersen.com/posts/2015/02/02/first-thoughts-on-graph-ql/
https://github.com/facebook/graphql
https://facebook.github.io/react/blog/2015/05/01/graphql-introduction.html/
https://code.facebook.com/posts/1691455094417024/graphql-a-data-query-language/
&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
##Thank you :)

&lt;/section&gt;
</description>
        <pubDate>Sun, 21 Feb 2016 00:00:00 +0530</pubDate>
        <link>http://slides.redpanthers.co/slides/Graphql/</link>
        <guid isPermaLink="true">http://slides.redpanthers.co/slides/Graphql/</guid>
        
        
      </item>
    
      <item>
        <title>Memoization in ruby</title>
        <description>&lt;section data-markdown=&quot;&quot;&gt;
# Memoization in Ruby

Feb 18, 2016
&lt;/section&gt;

&lt;section&gt;
  &lt;h4&gt;Pooja Raghunath&lt;/h4&gt;
  &lt;p&gt;
    Ruby Developer@RedPanthers
  &lt;/p&gt;
&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
### What is Memoization?

* Memoization is the process of storing a computed value to avoid duplicated work by future calls.

* Memoization can be used to initialize a variable and store it with the result of some computation that is expected to give same result if computed again.

&lt;/section&gt;
&lt;section data-markdown=&quot;&quot;&gt;
### Basic memoization pattern
* Perform some work
* Store the work result
* Use stored results in future calls

&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
### Types of memoization
* Single-line memoization
* Multiple-line memoization

&lt;/section&gt;

&lt;section&gt;
Single-line memoization
&lt;img alt=&quot;Jeroen De Meerleer&quot; src=&quot;/slides/images/mem01.png&quot; /&gt;
&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
###Multiple-line memoization
Slow code won’t fit on one line without doing terrible things to it. There are a few ways to extend the basic pattern to work with multiple lines of code.

&lt;/section&gt;

&lt;section&gt;
Multiple-line memoization

&lt;img alt=&quot;Jeroen De Meerleer&quot; src=&quot;/slides/images/memo11.png&quot; /&gt;
&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
### When to use Memoization
* When you have complex calculation that is supposed to give same result on multiple calls

* When you have a method that is giving same result over multiple calls but you need to call it multiple times

&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
### When to use Memoization -- contd.
* When you have database query with same parameters for a instance

  @user_score ||= User.where(name: &#39;Sam&#39;).first.try(:name)


* If you need user Sam&#39;s score then you can calculate and store it. When you need again then you can just return it from the instance variable.

&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
###What about nil and false in Memoization?

* Memoization technique  does not work with nil,false values.

@variable ||= false # suppose calculation value is false  

* As @variable had false value it will again go and evaluate for the OR part of condition which will come out false again.

* Thus, over multiple calls Memoization will not work if value comes out to be nil, or false.

&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
### What is Lazy initialization?

Lazy initialization is delaying intialization of the object/entity until the need of it for first time.

&lt;/section&gt;

&lt;section&gt;
 Lazy initialization
&lt;img alt=&quot;Jeroen De Meerleer&quot; src=&quot;/slides/images/lazy1.png&quot; /&gt;


&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
### Does Rails support Memoization?

* Rails had support for Memoize through ActiveSupport::Memoizable.
* Memoizable is deprecated from Rails.
* Memoist is an extraction of ActiveSupport::Memoizable.

&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
### When should you memoize?

* When  duplicated database calls
* When  expensive calculations
* When  repeated calculations that don’t change


&lt;/section&gt;
&lt;section data-markdown=&quot;&quot;&gt;
### When shouldn’t you memoize?

* Method that takes parameter
* Methods that uses instance variables

&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
### Conclusion
* So if you’re working on an app that needs a lot of memoization, you might want to use a gem that handles memoization for you with a nice, friendly API.

* Memoist seems to be a good one, and pretty similar to what Rails used to have.

&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
### References
* http://www.justinweiss.com/articles/4-simple-memoization-patterns-in-ruby-and-one-gem/
* http://rubyinrails.com/2014/11/03/memoization-ruby/
* http://gavinmiller.io/2013/basics-of-ruby-memoization/

&lt;/section&gt;
</description>
        <pubDate>Thu, 18 Feb 2016 00:00:00 +0530</pubDate>
        <link>http://slides.redpanthers.co/slides/memoization-in-ruby</link>
        <guid isPermaLink="true">http://slides.redpanthers.co/slides/memoization-in-ruby</guid>
        
        
      </item>
    
      <item>
        <title>Shared Examples in Rspec</title>
        <description>&lt;section data-markdown=&quot;&quot;&gt;
# Shared Examples in Rspec and keeping the code dry

Feb 16, 2016
&lt;/section&gt;

&lt;!-- Just to show that markdown and html can be mixed --&gt;
&lt;section&gt;
  &lt;h4&gt;Hi, I am&lt;/h4&gt;
  &lt;h3&gt;Ajay Joseph&lt;/h3&gt;
  &lt;div style=&quot;width:150%;&quot;&gt;
    &lt;div style=&quot;float:left; width:30%;&quot;&gt;
      &lt;img alt=&quot;Jeroen De Meerleer&quot; src=&quot;https://scontent-hkg3-1.xx.fbcdn.net/hphotos-frc3/v/t1.0-9/945390_3255807009318_1975357127_n.jpg?oh=1cbfba3bef55ba6fa91cb048a4808622&amp;amp;oe=5747C14D&quot; style=&quot;float: left; width:300px; height:300px;&quot; /&gt;
    &lt;/div&gt;
    &lt;div style=&quot;float:right; width:70%;&quot;&gt;
      &lt;ul style=&quot;float: left; padding-top: 4%;&quot;&gt;
          &lt;li&gt;Ruby Devoloper Trainee at Redpanthers&lt;/li&gt;

      &lt;/ul&gt;
    &lt;/div&gt;
  &lt;/div&gt;

&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
### DRY
DRY (Don&#39;t Repeat Yourself)  is a principle of Software Development to reducing repetition of information or codes. We can apply DRY quite broadly to database schema, test plan, system, even documentation. DRY is mainly impremented using inheritance.

&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
##What is shared example?


&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
###Shared examples describe behaviour of classes or modules.
&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
###Shared examples make testing compositions of objects much easier. They allow us to execute the same group of expectations against several classes.
&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
###Including shared groups in other groups

&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
* include_examples &quot;name&quot;
* it_behaves_like &quot;name&quot;
* it_should_behave_like &quot;name&quot;
* matching metadata

&lt;/section&gt;

&lt;section&gt;

    &lt;img alt=&quot;Jeroen De Meerleer&quot; src=&quot;/slides/images/Screen Shot 2016-02-16 at 7.58.14 am.png&quot; /&gt;

&lt;/section&gt;

&lt;section&gt;

    &lt;img alt=&quot;Jeroen De Meerleer&quot; src=&quot;/slides/images/Screen Shot 2016-02-16 at 8.01.30 am.png&quot; /&gt;

&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
To prevent this kind of subtle error a warning is emitted if you declare multiple
methods with the same name in the same context. Should you get this warning
the simplest solution is to replace include_examples with it_behaves_like, in this
way method overriding is avoided because of the nested context created by it_behaves_like.

&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
##Shared Examples Conventions

The simplest approach is to require files with shared examples explicitly
from the files that use them. Keep in mind that RSpec adds the spec
directory to the LOAD_PATH, so you can say require
&#39;shared_examples_for_widgets&#39; to require a file at
###{PROJECT_ROOT}/spec/shared_examples_for_widgets.rb.

&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
##Shared Examples Conventions contd

One convention is to put files containing shared examples in spec/support/
and require files in that directory from spec/spec_helper.rb:

&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
##Shared Examples Conventions contd

When all of the groups that include the shared group reside in the same file,
just declare the shared group in that file.

&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
##Shared Examples Scenarios



&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
##Shared examples group included in two groups in one file

&lt;/section&gt;

&lt;section&gt;

    &lt;img alt=&quot;Jeroen De Meerleer&quot; src=&quot;/slides/images/Screen Shot 2016-02-16 at 8.15.17 am.png&quot; /&gt;

&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
##Passing parameters to a shared example group

&lt;/section&gt;

&lt;section&gt;

    &lt;img alt=&quot;Jeroen De Meerleer&quot; src=&quot;/slides/images/Screen Shot 2016-02-16 at 8.20.11 am.png&quot; /&gt;

&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
##Sharing metadata automatically includes shared example groups

&lt;/section&gt;

&lt;section&gt;

    &lt;img alt=&quot;Jeroen De Meerleer&quot; src=&quot;/slides/images/Screen Shot 2016-02-16 at 8.24.01 am.png&quot; /&gt;

&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
###References

* https://www.relishapp.com/rspec/rspec-core/docs/example-groups/shared-examples
* http://modocache.svbtle.com/code-reading-shared-examples-in-rspec
* http://modocache.io/shared-examples-in-rspec

&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;

##Thank you :)

&lt;/section&gt;
</description>
        <pubDate>Tue, 16 Feb 2016 00:00:00 +0530</pubDate>
        <link>http://slides.redpanthers.co/slides/shared-examples-rspec</link>
        <guid isPermaLink="true">http://slides.redpanthers.co/slides/shared-examples-rspec</guid>
        
        
      </item>
    
      <item>
        <title>Jasmite Test Suite</title>
        <description>&lt;section data-markdown=&quot;&quot;&gt;
 Jasmine Javascript Test Suite
&lt;/section&gt;
&lt;section&gt;
	&lt;h4&gt;Sibin Xavier&lt;/h4&gt;
	&lt;p&gt;
		Frontend Developer
	&lt;/p&gt;
&lt;/section&gt;
&lt;section data-markdown=&quot;&quot;&gt;
### Testing is Important !!
 - To discover defects.
 - To avoid user detecting problems
 - To prove that the software has no faults
 - To learn about the reliability of the software.
 - To avoid being sued by customers
&lt;/section&gt;
&lt;section data-markdown=&quot;&quot;&gt;
### Testing is Important Cont..
 - To ensure that product works as user expected.
 - To stay in business
 - To detect defects early, which helps in reducing the cost of defect fixing?
&lt;/section&gt;
&lt;section data-markdown=&quot;&quot;&gt;
### Different type testing approach

  - Test Driven Development ( TDD )

  - Behavior Driven Development ( BDD )

&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
### TDD - Test Driven Development

  Simple and Easy to understand for Developers

  - First the developer writes some tests.
  - The developer then runs those tests and (obviously) they fail because none of those features are actually implemented.
  - Next the developer actually implements those tests in code.
&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
### TDD - contd..
  - If the developer writes his code well, then the in next stage he will see his tests pass.
  - The developer can then refactor his code, add comments, clean it up, as he wishes because the developer knows that    if the new code breaks something, then the tests will alert him by failing.

&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
### Test Driven Development - Life Cycle
  * Add a Test
  * Run all tests and see if the new one fails
  * Write some code
  * Run tests
  * Refactor code
  * Repeat
&lt;/section&gt;
&lt;section data-markdown=&quot;&quot;&gt;

  ![TDD](/slides/assets/images/tdd-flowchart.png)
&lt;/section&gt;
&lt;section data-markdown=&quot;&quot;&gt;
### Various Methods

- KISS ( Keep It Simple, Stupid)
- YAGNI (You Aren&#39;t Gonna Need It)

&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
### Everything have some Advantages

  - More Test More Productive
  - More Quality
  - More Issue solving
  - More Cases
  - More Happy

Still issues

&lt;/section&gt;
&lt;section data-markdown=&quot;&quot;&gt;
### Everything have some Limitation

  * TDD also has many limitations
  * Extensive use of `Unit Testing`
  * Time spent to write Tests
  * Depend upon developer
  * Security Issues and Lots of useless codes
  * Maintenance is Cumbersome

&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
### Many alternatives

- Test Driven Work
- Acceptance Test Driven Development

&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
### BDD - Behavior Driven Test  

- New approach

&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
### BDD is not

![TDD vs BDD](/slides/assets/images/two-roads.jpg)
&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
### BDD is

![Originated from TDD](/slides/assets/images/originated-from-tdd.jpg)
&lt;/section&gt;
&lt;section data-markdown=&quot;&quot;&gt;
### BDD is

- Use General Technique and Principle of TDD
- Use benefits of Domain Driven Design and Object Oriented Analysis and Design


&lt;/section&gt;
&lt;section data-markdown=&quot;&quot;&gt;
### BDD Focus On

  - Where to start in the process
  - What to test and what not to test
  - How much to test in one go
  - What to call the tests
  - How to understand why a test fails

&lt;/section&gt;
&lt;section data-markdown=&quot;&quot;&gt;
####Example

  &amp;gt;Scenario 1:
  Refunded items should be returned to stock
  Given a customer previously bought a black sweater from me
  And I currently have three black sweaters left in stock
  When he returns the sweater for a refund
  Then I should have four black sweaters in stock

&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
## Jasmine - BDD for JavaScript Applications

Jasmine is Behavior Driven Development framework, It is not depend upon any other Frameworks,
Also It is not required DOM ( Document Object Model)

Jasmine available as Standalone version, as packages for Angular JS, Meteor JS and a Couple of other frameworks

Current Version is 2.4.1

&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
### Similar to other Testing Frameworks

It is similar to RSpec and Other Frameworks
***
#### Common

- Describe  block `describe`
- It block `it`
- Expect, ToBe, ToEqual etc...
- Pending methods

&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
##### Typical Example

  ```
  describe(&#39;A Suite &#39;, function(){
    it(&quot;checking true equal to true&quot;, function(){
      expect(true).tobe(true)
    })  
  })
  ```

&lt;/section&gt;
&lt;section data-markdown=&quot;&quot;&gt;
### Suite

* Describe method
* Describe : String and Function as argument


&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
### Specs

* It method
* It: String and Function as arguments
* As many expectations  
&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
#### `Pending` in Jasmine

&lt;figure class=&quot;code-highlight-figure&quot;&gt;&lt;div class=&quot;code-highlight&quot;&gt;&lt;pre class=&quot;code-highlight-pre&quot;&gt;&lt;div data-line=&quot;1&quot; class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;xdescribe(&#39;A Pending Suite&#39;, function()&amp;#x7b;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line=&quot;2&quot; class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;    xit(&quot;Checking pending spec&quot;, function()&amp;#x7b;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line=&quot;3&quot; class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;        pending()
&lt;/div&gt;&lt;/div&gt;&lt;div data-line=&quot;4&quot; class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;    &amp;#x7d;)
&lt;/div&gt;&lt;/div&gt;&lt;div data-line=&quot;5&quot; class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;&amp;#x7d;)
&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;/section&gt;
&lt;section data-markdown=&quot;&quot;&gt;
### Setup and Teardown

##### Before and After methods

&lt;figure class=&quot;code-highlight-figure&quot;&gt;&lt;div class=&quot;code-highlight&quot;&gt;&lt;pre class=&quot;code-highlight-pre&quot;&gt;&lt;div data-line=&quot;1&quot; class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;beforeEach(function()&amp;#x7b;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line=&quot;2&quot; class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line=&quot;3&quot; class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;&amp;#x7d;)&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;figure class=&quot;code-highlight-figure&quot;&gt;&lt;div class=&quot;code-highlight&quot;&gt;&lt;pre class=&quot;code-highlight-pre&quot;&gt;&lt;div data-line=&quot;1&quot; class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;afterEach(function()&amp;#x7b;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line=&quot;2&quot; class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line=&quot;3&quot; class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;&amp;#x7d;)&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;/section&gt;
&lt;section data-markdown=&quot;&quot;&gt;
### Setup and Teardown - Contd..

##### Before All  and After  All
- Execute only once

&lt;figure class=&quot;code-highlight-figure&quot;&gt;&lt;div class=&quot;code-highlight&quot;&gt;&lt;pre class=&quot;code-highlight-pre&quot;&gt;&lt;div data-line=&quot;1&quot; class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;beforeAll(function()&amp;#x7b;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line=&quot;2&quot; class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line=&quot;3&quot; class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;&amp;#x7d;)&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;figure class=&quot;code-highlight-figure&quot;&gt;&lt;div class=&quot;code-highlight&quot;&gt;&lt;pre class=&quot;code-highlight-pre&quot;&gt;&lt;div data-line=&quot;1&quot; class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;afterAll(function()&amp;#x7b;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line=&quot;2&quot; class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line=&quot;3&quot; class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;&amp;#x7d;)&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;/section&gt;
&lt;section data-markdown=&quot;&quot;&gt;
# Spies

- A Spy can stub any function and tracks call to it and all arguments
- A Spy only exist inside describe or it block
- A Spy remove after each spec (it)

&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
## Spies - Helpers
- toHaveBeenCalled - return `true` if spy called
- toHabeBeenCalledWith - return `true` if the argument list matches any recorded calls

&lt;/section&gt;
&lt;section data-markdown=&quot;&quot;&gt;
### Example with Spy

&lt;/section&gt;
&lt;section data-markdown=&quot;&quot;&gt;
### Reference

* [Jasmine](http://jasmine.github.io/)
* [Josidavis](http://joshldavis.com/2013/05/27/difference-between-tdd-and-bdd/)
&lt;/section&gt;
</description>
        <pubDate>Mon, 15 Feb 2016 00:00:00 +0530</pubDate>
        <link>http://slides.redpanthers.co/slides/jasmine-javascript-test-suite</link>
        <guid isPermaLink="true">http://slides.redpanthers.co/slides/jasmine-javascript-test-suite</guid>
        
        
      </item>
    
  </channel>
</rss>
